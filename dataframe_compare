import dask.dataframe as dd
import pandas as pd
import numpy as np
from prettytable import PrettyTable
import datetime


join_column = ['id']
sample_rows = 10
mismatch_sample = 5


#--------------------------------------------------------------------------------------------------------------------------------
# Generate sample test data.
#--------------------------------------------------------------------------------------------------------------------------------

num_rows = 1000

common_data = {
    'id': range(1, num_rows + 1),
    # 'id2': np.random.randint(10000, 20000, num_rows),
    'email': [f'user{i}@company.com' for i in range(1, num_rows + 1)],
    'name': np.random.choice(['John', 'Jane', 'Michael', 'Emily', 'William'], num_rows),
    'first': np.random.choice(['John', 'Jane', 'Michael', 'Emily', 'William'], num_rows),
    'last': np.random.choice(['Doe', 'Smith', 'Johnson', 'Brown', 'Davis'], num_rows),
    'manager': np.random.choice(['Manager A', 'Manager B', 'Manager C', 'Manager D'], num_rows),
    'department': np.random.choice(['HR', 'IT', 'Finance', 'Marketing'], num_rows),
    # Add more common columns as needed
}

df2_additional = {
    'id': range(1, num_rows + 1),
    'email': [f'user{i}@company.com' for i in range(1, num_rows + 1)],
    'name': np.random.choice(['John', 'Jane', 'Jr.Michael', 'Emily', 'William'], num_rows),
    'first': np.random.choice(['John', 'Jane', 'Michael', 'Emily', 'William'], num_rows),
    'last': np.random.choice(['Doe', 'Smith', 'Johnson', 'Brown', 'Davis'], num_rows),
    'manager': np.random.choice(['Manager A', 'Manager B', 'Manager C', 'Manager D'], num_rows),
    'department': np.random.choice(['HR', 'IT', 'Finance', 'Marketing'], num_rows),
}

df1 = pd.DataFrame(common_data)
df2 = pd.DataFrame({**common_data, **df2_additional})


ddf1 = dd.from_pandas(df1, npartitions=4)
ddf2 = dd.from_pandas(df2, npartitions=4)

# Display sample data from both dataframes
# print("Sample data from DataFrame 1:")
# print(df1.head())

# print("\nSample data from DataFrame 2:")
# print(df2.head())

#--------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------


def compare_dataframes(ddf1, ddf2, join_columns):
    """
    Compare two dataframes and return the differences.

    Parameters:
    ddf1 (DataFrame): The first dataframe.
    ddf2 (DataFrame): The second dataframe.
    join_columns (Union[str, List[str]]): The column(s) to join on.

    Returns:
    dict: A dictionary with keys 'only_in_df1', 'only_in_df2', and 'mismatched_rows'.
    """
    if isinstance(join_columns, str):
        join_columns = [join_columns]
    elif not isinstance(join_columns, list):
        raise ValueError("join_columns must be a string or a list of strings")

    try:
        merged = ddf1.merge(ddf2, on=join_columns, suffixes=('_df1', '_df2'), how='outer', indicator=True).compute()
    except Exception as e:
        raise RuntimeError(f"Error during merging: {e}")

    only_in_df1 = merged[merged['_merge'] == 'left_only']
    only_in_df2 = merged[merged['_merge'] == 'right_only']
    both = merged[merged['_merge'] == 'both']

    mismatched_rows = both[both.filter(like='_df1').astype(str).ne(both.filter(like='_df2').astype(str)).any(axis=1)]

    differences = {
        'only_in_df1': only_in_df1,
        'only_in_df2': only_in_df2,
        'mismatched_rows': mismatched_rows
    }

    return differences


def generate_report(df1, df2, differences, join_column, sample_rows=None, mismatch_sample=None, mismatch_columns=None):
    """
    Generate a detailed comparison report between two dataframes.

    Parameters:
    df1 (DataFrame): The first dataframe.
    df2 (DataFrame): The second dataframe.
    differences (dict): The differences dictionary from compare_dataframes.
    join_column (Union[str, List[str]]): The column(s) to join on.
    sample_rows (int, optional): Number of sample rows to include in the report.
    mismatch_sample (int, optional): Number of mismatched rows to sample.
    mismatch_columns (Union[str, List[str]], optional): Specific columns to check for mismatches.

    Returns:
    str: The generated report as a string.
    """
    report = []

    def add_section(title, table):
        """
        Add a section to the report.

        Parameters:
        title (str): The title of the section.
        table (PrettyTable): The table to add to the section.
        """
        report.append(title)
        report.append(table.get_string())
        report.append(f"{'=='*60}\n")

    def generate_info_table(df1, df2):
        """
        Generate a table with information about the dataframes.

        Parameters:
        df1 (DataFrame): The first dataframe.
        df2 (DataFrame): The second dataframe.

        Returns:
        PrettyTable: The generated information table.
        """
        try:
            info_table = PrettyTable()
            info_table.field_names = ["DataFrame 1 Column", "DataFrame 1 Type", "DataFrame 2 Column", "DataFrame 2 Type"]

            df1_cols = df1.dtypes.reset_index()
            df2_cols = df2.dtypes.reset_index()

            max_len = max(len(df1_cols), len(df2_cols))

            for i in range(max_len):
                row = []
                if i < len(df1_cols):
                    row.extend([df1_cols.iloc[i, 0], df1_cols.iloc[i, 1]])
                else:
                    row.extend(["", ""])

                if i < len(df2_cols):
                    row.extend([df2_cols.iloc[i, 0], df2_cols.iloc[i, 1]])
                else:
                    row.extend(["", ""])

                info_table.add_row(row)

            return info_table
        except Exception as e:
            raise RuntimeError(f"Error generating info table: {e}")

    def generate_columns_mismatch_table(df1, df2):
        """
        Generate tables for columns that are only in one of the dataframes.

        Parameters:
        df1 (DataFrame): The first dataframe.
        df2 (DataFrame): The second dataframe.

        Returns:
        tuple: Two PrettyTables, one for columns only in df1 and one for columns only in df2.
        """
        try:
            only_in_df1_cols = set(df1.columns) - set(df2.columns)
            only_in_df2_cols = set(df2.columns) - set(df1.columns)

            only_in_df1_cols_table = PrettyTable()
            only_in_df1_cols_table.field_names = ["Columns in DataFrame 1 but not in DataFrame 2"]
            for col in only_in_df1_cols:
                only_in_df1_cols_table.add_row([col])

            only_in_df2_cols_table = PrettyTable()
            only_in_df2_cols_table.field_names = ["Columns in DataFrame 2 but not in DataFrame 1"]
            for col in only_in_df2_cols:
                only_in_df2_cols_table.add_row([col])

            return only_in_df1_cols_table, only_in_df2_cols_table
        except Exception as e:
            raise RuntimeError(f"Error generating columns mismatch table: {e}")

    def generate_summary_table(df1, df2):
        """
        Generate a summary table for the dataframes.

        Parameters:
        df1 (DataFrame): The first dataframe.
        df2 (DataFrame): The second dataframe.

        Returns:
        PrettyTable: The generated summary table.
        """
        try:
            summary_table = PrettyTable()
            summary_table.field_names = ["DataFrame", "Rows", "Columns"]
            summary_table.add_row(["DataFrame 1", len(df1), len(df1.columns)])
            summary_table.add_row(["DataFrame 2", len(df2), len(df2.columns)])
            return summary_table
        except Exception as e:
            raise RuntimeError(f"Error generating summary table: {e}")

    def generate_rows_table(differences, key):
        """
        Generate a table for rows that are only in one of the dataframes.

        Parameters:
        differences (dict): The differences dictionary from compare_dataframes.
        key (str): The key for the rows to generate the table for.

        Returns:
        PrettyTable: The generated rows table.
        """
        try:
            rows_table = PrettyTable()
            rows_table.field_names = differences[key].columns
            for row in differences[key].itertuples(index=False):
                rows_table.add_row(row)
            return rows_table
        except Exception as e:
            raise RuntimeError(f"Error generating rows table: {e}")

    def generate_mismatch_tables(mismatched, join_column, mismatch_columns, mismatch_sample):
        """
        Generate tables for mismatched rows.

        Parameters:
        mismatched (DataFrame): The dataframe of mismatched rows.
        join_column (Union[str, List[str]]): The column(s) to join on.
        mismatch_columns (Union[str, List[str]], optional): Specific columns to check for mismatches.
        mismatch_sample (int, optional): Number of mismatched rows to sample.

        Returns:
        list: A list of tuples, where each tuple contains the title and table for a mismatched column.
        """
        try:
            mismatch_tables = []
            if mismatch_columns is None:
                columns_to_check = mismatched.filter(like='_df1').columns
            elif isinstance(mismatch_columns, str):
                columns_to_check = [mismatch_columns + '_df1']
            else:
                columns_to_check = [col + '_df1' for col in mismatch_columns]

            for col in columns_to_check:
                col_name = col.replace('_df1', '')
                mismatch_table = PrettyTable()
                mismatch_table.field_names = join_column + ["Column", "DataFrame 1", "DataFrame 2"]
                mismatch_rows = 0

                for index, row in mismatched.iterrows():
                    val1 = row[col]
                    val2 = row[col.replace('_df1', '_df2')]
                    if val1 != val2:
                        row_data = [row[join_col] for join_col in join_column] + [col_name, val1, val2]
                        mismatch_table.add_row(row_data)
                        mismatch_rows += 1
                        if mismatch_sample and mismatch_rows >= mismatch_sample:
                            break
                mismatch_tables.append((f"Column {col_name} Mismatches", mismatch_table))
            return mismatch_tables
        except Exception as e:
            raise RuntimeError(f"Error generating mismatch tables: {e}")

    def generate_sample_tables(mismatched, join_column, sample_rows):
        """
        Generate tables for sample mismatched rows.

        Parameters:
        mismatched (DataFrame): The dataframe of mismatched rows.
        join_column (Union[str, List[str]]): The column(s) to join on.
        sample_rows (int, optional): Number of sample rows to include.

        Returns:
        tuple: Two PrettyTables, one for sample mismatched rows from df1 and one for sample mismatched rows from df2.
        """
        try:
            sample_table_df1 = PrettyTable()
            sample_table_df2 = PrettyTable()

            common_cols = [col for col in df1.columns if col in df2.columns and col not in join_column]
            sample_table_df1.field_names = join_column + [f"DataFrame 1 ({col})" for col in common_cols]
            sample_table_df2.field_names = join_column + [f"DataFrame 2 ({col})" for col in common_cols]

            if sample_rows:
                sample_mismatched = mismatched.head(sample_rows)
            else:
                sample_mismatched = mismatched

            for row in sample_mismatched.itertuples(index=False, name=None):
                row_dict = {col: row[i] for i, col in enumerate(sample_mismatched.columns)}
                row_df1 = [row_dict.get(col, '') for col in join_column] + [row_dict.get(f"{col}_df1", '') for col in common_cols]
                row_df2 = [row_dict.get(col, '') for col in join_column] + [row_dict.get(f"{col}_df2", '') for col in common_cols]

                sample_table_df1.add_row(row_df1)
                sample_table_df2.add_row(row_df2)

            return sample_table_df1, sample_table_df2
        except Exception as e:
            raise RuntimeError(f"Error generating sample tables: {e}")

    # Summary and disclaimer
    report.append("Comparison Report Detailed Summary")
    report.append(f"Generated on: {datetime.datetime.now()}")
    report.append(f"Total rows in DataFrame 1: {len(df1)}")
    report.append(f"Total rows in DataFrame 2: {len(df2)}")
    report.append(f"Total columns in DataFrame 1: {len(df1.columns.values.tolist())}")
    report.append(f"Total columns in DataFrame 2: {len(df2.columns.values.tolist())}")
    report.append(f"Rows with mismatches: {len(differences['mismatched_rows'])}")
    report.append(f"Columns with mismatches: {len(differences['mismatched_rows'].columns) // 2}")
    report.append("\nDisclaimer: This report is generated based on the provided data and may not capture all edge cases or subtle differences between the DataFrames.\nIt is recommended to review the original source data for a comprehensive comparison.\n\n")

    # DataFrame information
    add_section("DataFrame Information", generate_info_table(df1, df2))

    # Columns in df1 but not in df2
    only_in_df1_cols_table, only_in_df2_cols_table = generate_columns_mismatch_table(df1, df2)
    add_section("Columns Mismatch Summary", only_in_df1_cols_table)
    add_section("Columns Mismatch Summary", only_in_df2_cols_table)

    # DataFrame summary
    add_section("DataFrame Summary", generate_summary_table(df1, df2))

    # Rows only in df1
    add_section("Rows only in DataFrame 1", generate_rows_table(differences, 'only_in_df1'))

    # Rows only in df2
    add_section("Rows only in DataFrame 2", generate_rows_table(differences, 'only_in_df2'))

    # Mismatched rows column-wise
    mismatch_tables = generate_mismatch_tables(differences['mismatched_rows'], join_column, mismatch_columns, mismatch_sample)
    for title, table in mismatch_tables:
        add_section(title, table)

    # Sample mismatched rows
    sample_table_df1, sample_table_df2 = generate_sample_tables(differences['mismatched_rows'], join_column, sample_rows)
    add_section("Sample Mismatched Rows from DataFrame 1", sample_table_df1)
    add_section("Sample Mismatched Rows from DataFrame 2", sample_table_df2)

    return "\n".join(report)



differences = compare_dataframes(ddf1, ddf2, join_column)

report = generate_report(df1, df2, differences, join_column=join_column, sample_rows=sample_rows, mismatch_sample=mismatch_sample)

print(report)
